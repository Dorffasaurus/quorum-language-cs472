use Libraries.Containers.HashTable
use Libraries.Testing.Tester
use Libraries.Testing.Test
use Libraries.Compute.Statistics.DataFrame

// TRAIN

HashTable<text,number> trainingProbabilities  
trainingProbabilities:Add ("Positive", 0.3)
trainingProbabilities:Add ( "Negative", 0.3)
trainingProbabilities:Add ( "Neutral", 0.3 )

HashTable<text,HashTable<text,number>> trainingLikelihoods 
HashTable<text, number> PositiveFeatures
PositiveFeatures:Add("happy",0.4) 
PositiveFeatures:Add("good" ,0.8) 
PositiveFeatures:Add("excellent",0.4)
trainingLikelihoods:Add ( "Positive" , PositiveFeatures)
HashTable<text, number> negativeFeatures
negativeFeatures:Add( "bad", 0.8)
negativeFeatures:Add("awful", 0.4)
negativeFeatures:Add( "unhappy", 0.2)
trainingLikelihoods:Add("Negative", negativeFeatures)
HashTable<text, number> neutralFeatures
neutralFeatures:Add("Neutral" , 0.8)
neutralFeatures:Add("average" , 0.4)
neutralFeatures:Add("ok" , 0.4)
neutralFeatures:Add("fine" , 0.2)
trainingLikelihoods:Add("Neutral", neutralFeatures)


// TEST ONE: NEUTRAL
WordFrequency tOneWF
BayesianModel tOneModel 
BayesianMultinomialClassifier tOneClassifier
tOneWF:ResetMap()
tOneWF:SetFilePath("/tests/neg_one.txt")
tOneWF:Calculate()
tOneModel:Initialize(trainingProbabilities, trainingLikelihoods, tOneWF:GetTotalWords() )
tOneClassifier:Initialize(tOneModel)
if tOneClassifier:classifyDocument(tOneWF:GetFrequencyMap()):Equals("Neutral")
    output "Test 1: Passed"
else
    output "Test 1: Failed"
end

ModelGraphs graph
//graph:PercentageChart(trainingLikelihoods, tOneWF:GetFrequencyMap(), "Sentence One"):Display()
graph:WordsChart(tOneWF:GetFrequencyMap(), "Sentence One", "Words", "Count"):Display()
// TEST TWO: POSITIVE
WordFrequency tTwoWF
BayesianModel tTwoModel 
BayesianMultinomialClassifier tTwoClassifier
tTwoWF:ResetMap()
tTwoWF:SetFilePath("/tests/pos_one.txt")
tTwoWF:Calculate()
tTwoModel:Initialize(trainingProbabilities, trainingLikelihoods, tTwoWF:GetTotalWords() )
tTwoClassifier:Initialize(tTwoModel)
if tTwoClassifier:classifyDocument(tTwoWF:GetFrequencyMap()):Equals("Positive")
    output "Test 2: Passed"
else
    output "Test 2: Failed"
end

// TEST THREE: NEGATIVE
WordFrequency tThreeWF
BayesianModel tThreeModel 
BayesianMultinomialClassifier tThreeClassifier
tThreeWF:ResetMap()
tThreeWF:SetFilePath("/tests/neg_one.txt")
tThreeWF:Calculate()
tThreeModel:Initialize(trainingProbabilities, trainingLikelihoods, tThreeWF:GetTotalWords() )
tThreeClassifier:Initialize(tThreeModel)
if tThreeClassifier:classifyDocument(tThreeWF:GetFrequencyMap()):Equals("Negative")
    output "Test 3: Passed"
else
    output "Test 3: Failed"
end