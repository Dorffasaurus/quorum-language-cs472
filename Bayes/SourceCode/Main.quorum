use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Compute.Math

class BayesianMultinomialClassifier
    BayesianModel model
      
    action Initialize(BayesianModel initialModel)
        model = initialModel
    end

    // Function to classify a document based on word counts
    action classifyDocument(HashTable<text, integer> wordCounts) returns text
        // Get the model parameters
        Math Math
        HashTable<text, number> probabilities = model:getProbabilities()
        HashTable<text, HashTable<text, number>> likelihoods = model:getLikelihoods()
        number evidence = model:getEvidence()

        HashTable<text, number> posteriors 
        Iterator<text> probabilitiesItr = probabilities:GetKeyIterator()

        // Calculate posterior probabilities for each class
        repeat while probabilitiesItr:HasNext()
            text classLabel = probabilitiesItr:GetCurrent()
            number posterior = probabilities:GetValue(classLabel)
            Iterator<text> wordCountsItr = wordCounts:GetKeyIterator()
            repeat while wordCountsItr:HasNext()
                text word = wordCountsItr:GetCurrent()
                if likelihoods:GetValue(classLabel):HasKey(word)
                    number likelihood = likelihoods:GetValue(classLabel):GetValue(word)
                    integer count = wordCounts:GetValue(word)  // Get the count of the word in the document
                    posterior = posterior * Math:RaiseToPower(likelihood, count)
                end
                wordCountsItr:Next()    
            end
            posteriors:Add(classLabel, posterior / evidence)
        end

        // Find the class with the highest posterior probability
        text predictedClass = FindClassWithMaxPosterior(posteriors)

        return predictedClass
    end

    // Helper function to find the class with the highest posterior probability
    action FindClassWithMaxPosterior(HashTable<text, number> posteriors) returns text
        text maxClass = ""
        number maxPosterior = -1

        Iterator<text> posteriorsItr = posteriors:GetKeyIterator()

        repeat while posteriorsItr:HasNext()
            text classLabel = posteriorsItr:Next()
            number posterior = posteriors:GetValue(classLabel)
            if posterior > maxPosterior
                maxPosterior = posterior
                maxClass = classLabel
            end
        end

        return maxClass
    end
end
