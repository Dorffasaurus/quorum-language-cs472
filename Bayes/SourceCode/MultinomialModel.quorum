use Libraries.Compute.Statistics.DataFrame
use Libraries.Containers.HashTable
use Libraries.Compute.Statistics.DataFrameColumn
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Containers.Support.HashTableIterator
use Libraries.Containers.Support.HashTableKeyIterator
use Libraries.Compute.Statistics.Columns.NumberColumn
use Libraries.Compute.Statistics.Columns.TextColumn
use Libraries.Language.Errors.UndefinedObjectError

class BayesianModel
  private  HashTable<text, number> probabilities
  private  HashTable<text, HashTable<text, number>> likelihoods
  private  number evidence = 0.0
    on create
    HashTable<text,number> P
    HashTable<text, HashTable<text, number>> L
    SetProbabilities(P)
    SetLikelihoods(L)
    SetEvidence(0.0)
    end
    // Constructor to initialize the Bayesian model with probabilities, likelihoods, and evidence
    action Initialize(HashTable<text, number> initialProbabilities, HashTable<text, HashTable<text, number>> initialLikelihoods, number initialEvidence)
        probabilities = initialProbabilities  // Set the initial class probabilities
        likelihoods = initialLikelihoods  // Set the initial word likelihoods for each class
        evidence = initialEvidence  // Set the initial evidence value
    end

    // Getter methods for accessing the model parameters

    // Get the class probabilities
    action GetProbabilities() returns HashTable<text, number>
        return probabilities
    end

    // Get the word likelihoods for each class
    action GetLikelihoods() returns HashTable<text, HashTable<text, number>>
        return likelihoods
    end

    // Get the evidence value
    action GetEvidence() returns number
        return evidence
    end

    // Setter methods for updating the model parameters

    // Set new class probabilities
    action SetProbabilities(HashTable<text, number> newProbabilities)
        probabilities = newProbabilities
    end

    // Set new word likelihoods for each class
    action SetLikelihoods(HashTable<text, HashTable<text, number>> newLikelihoods)
        likelihoods = newLikelihoods
    end

    // Set a new evidence value
    action SetEvidence(number newEvidence)
        evidence = newEvidence
    end

    action TrainProbabilities(DataFrame frame)
        
        DataFrameColumn tweet = frame:GetColumn(0)
        DataFrameColumn label = frame:GetColumn(1)
        integer test = frame:GetSize()
        Array<text> tweets
        Array<text> labels
        tweets = tweet:ConvertToTextArray()
        labels = label:ConvertToTextArray()
        WordFrequency LabelWF
        HashTable<text,integer> classHash = LabelWF:CalculateFromArray(labels)
        number TotalWords = LabelWF:GetTotalWords()    
        Iterator<text> classes = classHash:GetKeyIterator()
            repeat while classes:HasNext()
                text Class = classes:Next()
                number value = classHash:GetValue(Class)
                number probability = -1
                probability = (100 * (value / TotalWords)) /100
                probabilities:Add(Class,probability)
            end
        TrainLikelihoods(labels,tweets)
        
    end

    action TrainLikelihoods(Array<text> Classes,Array<text> Features)
        Iterator<text> C = Classes:GetIterator()
        Iterator<text> F = Features:GetIterator()
        repeat while C:HasNext()
            text PickedClass = C:Next()
            text PickedFeature = F:Next()
            HashTable<text,number> CurrentFeature
            HashTable<text,number> MM
            check 
                MM = likelihoods:GetValue(PickedClass)
                MM:IsEmpty()
            detect e is UndefinedObjectError
                MM = CurrentFeature   
            end
            CurrentFeature = MM
            WordFrequency  wf
            HashTable<text,integer> Counted = wf:CalculateText(PickedFeature)
            Array<text> Keys = Counted:CopyToKeyArray()
            Iterator<text> KeysItr = Keys:GetIterator()
            repeat while KeysItr:HasNext()
                number WordCount = 0
                text CurrentKey = KeysItr:Next()
                    check
                        WordCount = CurrentFeature:GetValue(CurrentKey)
                        WordCount = WordCount + Counted:GetValue(CurrentKey)
                        CurrentFeature:Add(CurrentKey, WordCount)
                    detect e is UndefinedObjectError
                        integer CurrCount = Counted:GetValue(CurrentKey)
                        CurrentFeature:Add(CurrentKey, CurrCount)
                        end 
                end
            likelihoods:Add(PickedClass,CurrentFeature)        
        end
    end
    action SaveModel()
        DataFrame df
        TextColumn ClassList 
        ClassList:SetHeader("Classes")
        NumberColumn Probs
        Probs:SetHeader("Probabilities")
        TextColumn Features
        Features:SetHeader("Features")
        NumberColumn Likes
        Likes:SetHeader("Likelihoods")
        TextColumn MatchedClass
        MatchedClass:SetHeader("Matching Class")
        Iterator<text> Classes = probabilities:GetKeyIterator()
        repeat while Classes:HasNext()
            text ClassName = Classes:Next()
            ClassList:Add(ClassName)
            Probs:Add(probabilities:GetValue(ClassName))
        end
        Classes = likelihoods:GetKeyIterator()
        repeat while Classes:HasNext()
            ClassName = Classes:Next()
            HashTable<text,number> Feats = likelihoods:GetValue(ClassName)
            Iterator<text> Words = Feats:GetKeyIterator()
            repeat while Words:HasNext()
                MatchedClass:Add(ClassName)
                text word = Words:Next()
                Features:Add(word) 
                Likes:Add(Feats:GetValue(word))
            end
        end
        df:AddColumn(0,ClassList)
        df:AddColumn(1,Probs) 
        df:AddColumn(2,Features) 
        df:AddColumn(3,Likes) 
        df:AddColumn(4,MatchedClass)
        df:Save("SavedModel.csv")
    end
end
