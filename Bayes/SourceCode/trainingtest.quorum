use Libraries.Containers.HashTable
// Training Phase

HashTable<text,number> trainingProbabilities  
trainingProbabilities:Add ("Positive", 0.5)
trainingProbabilities:Add ( "Negative", 0.3)
trainingProbabilities:Add ( "Neutral", 0.2 )


//HashTable<text,HashTable<text,number>,number> trainingLikelihoods 
//trainingLikelihoods:Add ( "Positive":  "good": 0.1, "excellent": 0.05, "happy": 0.08 , "Negative":  "bad": 0.2, "awful": 0.15, "unhappy": 0.1 , "Neutral":  "average": 0.07, "ok": 0.06, "fine": 0.09  

//Decimal trainingEvidence = 1000 // Total training documents

//BayesianModel model = New BayesianModel(trainingProbabilities, trainingLikelihoods, trainingEvidence)
// Prediction Phase
//String newDocument = "This product is really good and makes me happy."

// Tokenize the new document and extract features (words)
//List<String> documentFeatures = tokenizeAndPreprocess(newDocument)

// Calculate posterior probabilities for each sentiment class
//classifier.calculateAndDisplayPosterior()

// Use the highest posterior probability class as the predicted sentiment
// In this example, you would compare the posterior probabilities and determine the sentiment class with the highest value.
