package Libraries.Language.Compile.Documentation

use Libraries.Containers.Array
use Libraries.Language.Compile.Translate.ClassOpcode
use Libraries.Web.Page.NavigationDivision
use Libraries.Web.Page.Footer
use Libraries.Containers.Iterator
use Libraries.Web.Page.WebPage
use Libraries.System.File
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.WebPageHeader
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.Division
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.TableHeaderCell
use Libraries.Web.Page.TableData
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.StrongText
use Libraries.Web.Page.Link
use Libraries.Web.Page.HeaderLink
use Libraries.Web.Page.SmallText
use Libraries.Web.Page.Input
use Libraries.Web.Page.Form
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.UnorderedList
use Libraries.Language.Compile.CompilerResult
use Libraries.Containers.HashTable
use Libraries.Language.Compile.Symbol.SymbolTable
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Documentation
use Libraries.Language.Compile.Library
use Libraries.Language.Compile.Compiler

class DocumentationGenerator 
    File runFolder = undefined
    constant text DOCUMENTATION_FOLDER = "Documents/"
    boolean isBuildingStandardLibrary = false
    boolean isBuildingSourceFiles = true

    action GetRunFolder returns File
        return runFolder
    end

    action SetRunFolder(File file)
        runFolder = file
    end

    action Write(Library library, HashTable<text, ClassOpcode> opcodeHash, boolean includeStandardLibrary)
        NavigationBar navigation
        navigation:Setup()
        Footer footer = GetFooter()

        Iterator<ClassOpcode> opcodes = opcodeHash:GetValueIterator()
        SymbolTable standardLibrarySymbolTable = library:GetSymbolTable()
        SymbolTable finished
        repeat while opcodes:HasNext()
            ClassOpcode opcode = opcodes:Next()
            Class clazz = opcode:GetClass()

            boolean isInStandardLibrary = standardLibrarySymbolTable:HasClass(clazz:GetStaticKey())
            if not isInStandardLibrary or (isInStandardLibrary and includeStandardLibrary)
                finished:Add(clazz)
                WebPage page = opcode:WriteToWebPage(me)
                text web = page:Generate()
                text key = clazz:GetStaticKey()
                text parentKey = ""
                Array<text> split = key:Split("\.")
                i = 0
                repeat split:GetSize() - 1 times
                    parentKey = parentKey + split:Get(i) + "/"
                    i = i + 1
                end
                key = "/" + key:Replace(".", "/") + ".html"


                runFolder:CreateDirectories()
                File mom
                mom:SetWorkingDirectory(runFolder:GetAbsolutePath())
                mom:SetPath(DOCUMENTATION_FOLDER + "/" + parentKey)
                mom:CreateDirectories()

                File documentationFile
                documentationFile:SetWorkingDirectory(runFolder:GetAbsolutePath())
                documentationFile:SetPath(DOCUMENTATION_FOLDER + "/" + key)
                documentationFile:Write(web)
            end
        end

       WriteIndexPage(finished)
    end

    action Write(Library library)
        NavigationBar navigation
        navigation:Setup()
        Footer footer = GetFooter()

        Iterator<ClassOpcode> opcodes = library:GetOpcodes()
        SymbolTable table = library:GetSymbolTable()
        repeat while opcodes:HasNext()
            ClassOpcode opcode = opcodes:Next()
            Class clazz = opcode:GetClass()
            WebPage page = opcode:WriteToWebPage(me)//navigation, footer)
            text web = page:Generate()//code:WriteToWeb()
            text key = clazz:GetStaticKey()
            text parentKey = ""
            Array<text> split = key:Split("\.")
            i = 0
            repeat split:GetSize() - 1 times
                parentKey = parentKey + split:Get(i) + "/"
                i = i + 1
            end
            key = "/" + key:Replace(".", "/") + ".html"


            runFolder:CreateDirectories()
            File mom
            mom:SetWorkingDirectory(runFolder:GetAbsolutePath())
            mom:SetPath(DOCUMENTATION_FOLDER + "/" + parentKey)
            mom:CreateDirectories()

            File documentationFile
            documentationFile:SetWorkingDirectory(runFolder:GetAbsolutePath())
            documentationFile:SetPath(DOCUMENTATION_FOLDER + "/" + key)
            documentationFile:Write(web)
        end

        WriteIndexPage(library:GetSymbolTable())
    end

    action WriteIndexPage(SymbolTable symbolTable)
        WebPage page
        AddDefaultHeaders(page)
        //auto-generate some sensible keywords
        MetaData keywords
        text keywordText = "programming for beginners, computer programming,
        Quorum programming language, Standard Library"
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", keywordText)
        page:AddMetaData(keywords)

        MetaData metaDataDescription
        metaDataDescription:SetContent("Read more about the Quorum programming language's standard library.")
        metaDataDescription:SetName("description")
        page:AddMetaData(metaDataDescription)

        Compiler compiler
        page:SetWebPageTitle("Standard Library Index - " + compiler:GetVersion())
        MainContent mainRegion
        mainRegion:AddAttribute("role","main")

        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading(compiler:GetVersion() + " Standard Library", 1)
        page:Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Quorum's Built-in Packages and Classes", 2)
        bodyDiv:AddParagraph("This page shows the full list of classes Quorum 
supports in the current version of the standard library. These classes are 
placed into packages organized by their subject area. For example, math related 
classes are in Libraries.Compute, general data structures are in 
Libraries.Containers, user interfaces (e.g., buttons, text boxes) are in 
Libraries.Interface. Besides these, there are many more packages that are 
used for a variety of purposes (e.g., networking, robots, games, graphics, 
sound, digital signal processing, mobile applications). The purpose of this 
index page is to help users find information about specific packages or 
classes. Thus, this page is structured as a reference and is not intended as a 
tutorial.")

        Iterator<text> packages = symbolTable:GetPackagesSortedIterator()
        repeat while packages:HasNext()
            text key = packages:Next()
            if not key:IsEmpty() //ignore the default package
                WebTable table
                table:SetBorder(true)

                TableRow headerRow
                TableHeaderCell packageNameHeaderCell
                packageNameHeaderCell:AddText(key)
                headerRow:Add(packageNameHeaderCell)
                table:Add(headerRow)

                Array<Class> classes = symbolTable:GetClassesSortedInPackage(key)
                integer i2 = 0
                repeat classes:GetSize() times
                    Class clazz = classes:Get(i2)
                    TableRow row

                    TableData data
                    data:Add(GetWebLinkForClassFromIndex(clazz, true))
                    row:Add(data)

                    Documentation doc = clazz:GetDocumentation()
                    if doc not= undefined
                        constant integer DOC_SIZE = 120
                        text description = doc:GetDescription()
                        if description = undefined
                            description = ""
                        end
                        if description:GetSize() > DOC_SIZE
                            description = description:GetSubtext(0, DOC_SIZE) + " ..."
                        end
                        data:AddText(": " + description)
                    end
                    table:Add(row)
                    i2 = i2 + 1
                end
                bodyDiv:Add(table)
                LineBreak break
                bodyDiv:Add(break)
            end
        end

        mainRegion:Add(bodyDiv)
        page:Add(mainRegion)
        page:Add(GetFooter())

        File documentationFile
        documentationFile:SetWorkingDirectory(runFolder:GetAbsolutePath())
        documentationFile:SetPath(DOCUMENTATION_FOLDER + "/" + "libraries.html")
        documentationFile:Write(page:Generate())
    end

    action AddDefaultHeaders(WebPage page)
        //add language headers
        page:AddAttribute("xml:lang", "en")
        page:SetLanguage("en")

        //add the meta-data character set
        MetaData charset
        charset:SetCharacterSet("UTF-8")
        page:AddMetaData(charset)

        MetaData viewport
        viewport:SetContent("width=device-width, initial-scale=1")
        viewport:SetName("viewport")
        page:AddMetaData(viewport)

        text metaDescriptionContent = GetMetaDescription()
        if metaDescriptionContent not= undefined
            MetaData description
            description:SetContent(metaDescriptionContent)
            description:SetName("description")
            page:AddMetaData(description)
        end
        
        page:AddMetaData(GenerateKeywords())
        page:AddScript("/script/jquery-1.8.3.min.js")
        page:AddScript("/script/script.js")
        page:AddScript("/script/prism-quorum.js")
        
        //add style sheet tags
        page:AddStylesheet("/style/style.css")
        page:AddStylesheet("/style/google.css")
        page:AddIcon("/media/favicon.ico")

        //Add Responsive Stylesheets
        WebPageHeader webHeader = page:GetWebPageHeader()
        webHeader:Add(GetMediaStyleSheet("/style/style-small.css", "(max-width: 500px)"))
        webHeader:Add(GetMediaStyleSheet("/style/style-medium.css", "(min-width: 501px) and (max-width: 1000px)"))
        webHeader:Add(GetMediaStyleSheet("/style/style-large.css", "(min-width: 1001px)"))

        //Add the navigation bar
        NavigationBar navigation
        page:Add(navigation)
    end

    action GetMetaDescription returns text
        return "This page includes documentation for part of the Quorum programming language."
    end

    action GenerateKeywords returns MetaData
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "programming for beginners, game programming, 
        lego programming, computer courses, programming 3D, programming,
        animation, graphics, multimedia, games, accessibility, computer science for all,
        computer science, computer languages, Quorum programming language, robot programming,
        online programming")
        return keywords
    end

    action GetFooter returns Footer
        Footer footer
        footer:AddText("The Quorum Programming Language")
        footer:SetIdentifier("footer")
        SmallText small
        small:AddText("Copyright &copy; 2014-2018. Art and Design by 
            Andreas Stefik, Melissa Stefik, and Evan Pierzina")
        footer:Add(small)
        return footer
    end

    private action GetMediaStyleSheet(text name, text media) returns HeaderLink
        HeaderLink link
        link:SetAddress(name)
        link:SetType("text/css")
        link:SetRelationship("stylesheet")
        link:SetMedia(media)
        return link
    end

    private action GetClassLinkFromIndex(Class from) returns text
        text link = ""
        text key = from:GetStaticKey()
        Array<text> fromSplit = key:Split("\.")
        if fromSplit not= undefined
            i = 0
            repeat fromSplit:GetSize() times
                if i < fromSplit:GetSize() - 1
                    link = link + fromSplit:Get(i) + "/"
                else
                    link = link + fromSplit:Get(i) + ".php"
                end
                i = i + 1
            end
        end
        text dq = link:GetDoubleQuote()
        link = "<a href = " + dq + link + dq + ">" + from:GetName() + "</a>"
        return link
    end

    private action GetWebLinkForClassFromIndex(Class from, boolean boldLink) returns Link
        Link link
        text key = from:GetStaticKey()
        text linkText = ""
        Array<text> fromSplit = key:Split("\.")
        if fromSplit not= undefined
            i = 0
            repeat fromSplit:GetSize() times
                if i < fromSplit:GetSize() - 1
                    linkText = linkText + fromSplit:Get(i) + "/"
                else
                    linkText = linkText + fromSplit:Get(i) + ".html"
                end
                i = i + 1
            end
        end
        link:SetAddress(linkText)
        if boldLink
            StrongText strong
            strong:AddText(from:GetName())
            link:Add(strong)
        else 
            link:AddText(from:GetName())
        end
        
        return link
    end

end