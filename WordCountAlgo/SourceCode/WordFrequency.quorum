use Libraries.System.File
use Libraries.System.FileReader
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Compute.Statistics.DataFrame
use Libraries.Containers.HashTable
use Libraries.Containers.Support.HashTableIterator
use Libraries.Containers.Support.HashTableKeyIterator
use Libraries.Language.Errors.Error
use Libraries.Language.Errors.FileNotFoundError
use Libraries.Language.Errors.UndefinedObjectError

class WordFrequency
    private text FileName = ""
    private HashTable<text, integer> WordCountMap
    private integer WordCounter = 0

    public action SetFilePath(text fileName)
        FileName = fileName
    end

    public action GetFrequencyMap returns HashTable<text, integer>
        return WordCountMap
    end

    public action Calculate returns boolean
        File inFile
        FileReader reader
        inFile:SetPath(FileName)

        check        
            reader:OpenForRead(inFile)
        detect e is FileNotFoundError
            output e:GetErrorMessage()
            return false
        end

        text fileContents = ""
        repeat while not reader:IsAtEndOfFile()
            fileContents = fileContents + reader:ReadLine() + " "
        end
    
        fileContents = fileContents:ToLowerCase()
        fileContents = fileContents:Replace(".", " ")
        fileContents = fileContents:Replace(",", " ")
        fileContents = fileContents:Replace("  ", " ")        

        Array<text> wordArr = fileContents:Split(" ")
        Iterator<text> wordItr = wordArr:GetIterator()

        repeat while wordItr:HasNext()
            text word = wordItr:Next()
            check
                integer count = WordCountMap:GetValue(word)
                count = count + 1
                WordCountMap:Set(word, count)
            detect e is UndefinedObjectError
                WordCountMap:Set(word, 1)
            end
        end

        inFile:Close()

        return true
    end
    // This function sets the map back to empty so it can be reused
    public action ResetMap
        WordCountMap:Empty()
    end
    
    public action GetWordCounter() returns integer
        return WordCounter
    end
    // This Function takes in an array and will classify the entire array 
    public action CalculateFromArray(Array<text> TextToBeClassified) returns HashTable<text,integer>
    Iterator<text> OuterItr = TextToBeClassified:GetIterator()
        repeat while OuterItr:HasNext()
            text section = OuterItr:Next()
            Array<text> Words = section:Split(" ")
            Iterator<text> WordItr = Words:GetIterator()
                repeat while WordItr:HasNext()
                    text word = WordItr:Next()
                    WordCounter = WordCounter + 1
                    check
                        integer count = WordCountMap:GetValue(word)
                        count = count + 1
                        WordCountMap:Set(word, count)
                    detect e is UndefinedObjectError
                        WordCountMap:Set(word, 1)
                    end                     
            
                end
        end
        return WordCountMap
    end
    // This function takes in a text value to be classified
    public action CalculateText(text InputText) returns HashTable<text,integer>
        check
            InputText:IsEmpty()
        detect e is Error
            HashTable<text,integer> EmptyTable
            return EmptyTable
        end
        Array<text> Words = InputText:Split(" ")
        Iterator<text> WordItr = Words:GetIterator()
    repeat while WordItr:HasNext()
            text word = WordItr:Next()
            WordCounter = WordCounter + 1
            check
                integer count = WordCountMap:GetValue(word)
                count = count + 1
                WordCountMap:Set(word, count)
            detect e is UndefinedObjectError
                WordCountMap:Set(word, 1)
             end
        end
        return WordCountMap
    end
    public action GetTotalWords returns integer
        Iterator<text> wordMapItr = WordCountMap:GetKeyIterator()
        integer total = 0
        repeat while wordMapItr:HasNext()
            text word = wordMapItr:Next()
            total = total + WordCountMap:GetValue(word)
        end
        return total
    end

    public action PrintFrequencies
        Iterator<text> wordMapItr = WordCountMap:GetKeyIterator()
        repeat while wordMapItr:HasNext()
            text word = wordMapItr:Next()
            integer count = WordCountMap:GetValue(word)
            output(word + ": " + count)
        end
    end
    
end